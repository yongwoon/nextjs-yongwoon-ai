---
description:
globs:
alwaysApply: false
---
- **UI와 로직(훅/비즈니스 로직)은 반드시 분리하여 관리한다**
  - UI 컴포넌트: `src/presentation/components/` 또는 `src/domains/[domain]/components/`
  - 로직/훅: `src/presentation/hooks/` 또는 `src/domains/[domain]/hooks/`
  - 도메인 특화 로직/컴포넌트는 해당 도메인 폴더 하위에 위치

- **Next.js App Router 페이지는 src/app/ 하위에 위치**
  - 예시: `src/app/auth/login/page.tsx`

- **예시**
  ```typescript
  // ✅ 올바른 예시
  src/presentation/components/auth/SignUpForm.tsx
  src/presentation/hooks/auth/useSignUpForm.ts
  src/domains/auth/components/SignUpForm.tsx
  src/domains/auth/hooks/useSignUpForm.ts
  src/app/auth/login/page.tsx
  ```

  ```typescript
  // ❌ 잘못된 예시
  src/components/SignUpForm.tsx // (presentation/components/로 이동 필요)
  src/authHooks/useSignUpForm.ts // (domains/auth/hooks/로 이동 필요)
  app/login.tsx // (app/auth/login/page.tsx로 이동 필요)
  ```

- **UI/로직 분리 원칙**
  - UI는 상태/로직을 props로 전달받아 표현만 담당
  - 로직/훅은 상태 관리, 폼 처리, API 연동 등 담당
  - 폴더 구조와 네이밍 규칙은 [file-location.mdc](mdc:.cursor/rules/file-location.mdc) 참고
