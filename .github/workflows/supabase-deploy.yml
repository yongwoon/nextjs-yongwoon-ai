# TODO: Cloud 를 사용해서 배포시 Activate 하기
# name: Supabase Database CI/CD

# on:
#   push:
#     branches: [main, develop]
#     paths:
#       - "supabase/**"
#       - ".github/workflows/supabase-deploy.yml"
#   pull_request:
#     branches: [main, develop]
#     paths:
#       - "supabase/**"

# env:
#   SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
#   SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}

# jobs:
#   validate-migrations:
#     name: Validate Database Migrations
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"
#           cache: "npm"

#       - name: Install Supabase CLI
#         run: |
#           npm install -g supabase
#           supabase --version

#       - name: Start local Supabase
#         run: |
#           supabase start

#       - name: Validate migration syntax
#         run: |
#           # 마이그레이션 파일 구문 검사
#           for file in supabase/migrations/*.sql; do
#             echo "Validating $file..."
#             # PostgreSQL 구문 검사 (dry-run)
#             psql -h localhost -p 54322 -U postgres -d postgres -f "$file" --dry-run || exit 1
#           done

#       - name: Run migrations on test database
#         run: |
#           supabase db reset

#       - name: Test seed data
#         run: |
#           supabase db reset --with-seed

#       - name: Run basic database tests
#         run: |
#           # 기본적인 데이터베이스 연결 및 테이블 존재 확인
#           psql -h localhost -p 54322 -U postgres -d postgres -c "
#             SELECT table_name
#             FROM information_schema.tables
#             WHERE table_schema = 'public'
#             AND table_type = 'BASE TABLE';
#           "

#           # RLS 정책 확인
#           psql -h localhost -p 54322 -U postgres -d postgres -c "
#             SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual
#             FROM pg_policies
#             WHERE schemaname = 'public';
#           "

#       - name: Stop local Supabase
#         if: always()
#         run: supabase stop

#   deploy-staging:
#     name: Deploy to Staging
#     runs-on: ubuntu-latest
#     needs: validate-migrations
#     if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

#     environment:
#       name: staging
#       url: ${{ steps.deploy.outputs.url }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"

#       - name: Install Supabase CLI
#         run: npm install -g supabase

#       - name: Link to Supabase staging project
#         run: |
#           supabase link --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
#         env:
#           SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

#       - name: Create database backup
#         run: |
#           echo "Creating backup before deployment..."
#           supabase db dump --data-only > staging_backup_$(date +%Y%m%d_%H%M%S).sql
#         env:
#           SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

#       - name: Deploy migrations to staging
#         id: deploy
#         run: |
#           supabase db push
#           echo "url=https://${{ secrets.SUPABASE_STAGING_PROJECT_REF }}.supabase.co" >> $GITHUB_OUTPUT
#         env:
#           SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

#       - name: Verify deployment
#         run: |
#           # 배포 후 기본적인 헬스 체크
#           echo "Deployment verification completed"

#   deploy-production:
#     name: Deploy to Production
#     runs-on: ubuntu-latest
#     needs: validate-migrations
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'

#     environment:
#       name: production
#       url: ${{ steps.deploy.outputs.url }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"

#       - name: Install Supabase CLI
#         run: npm install -g supabase

#       - name: Link to Supabase production project
#         run: |
#           supabase link --project-ref ${{ secrets.SUPABASE_PRODUCTION_PROJECT_REF }}
#         env:
#           SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

#       - name: Create database backup
#         run: |
#           echo "Creating production backup before deployment..."
#           supabase db dump --data-only > production_backup_$(date +%Y%m%d_%H%M%S).sql
#         env:
#           SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

#       - name: Deploy migrations to production
#         id: deploy
#         run: |
#           supabase db push
#           echo "url=https://${{ secrets.SUPABASE_PRODUCTION_PROJECT_REF }}.supabase.co" >> $GITHUB_OUTPUT
#         env:
#           SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

#       - name: Verify production deployment
#         run: |
#           echo "Production deployment verification completed"
#           # 여기에 더 엄격한 검증 로직을 추가할 수 있습니다

#       - name: Notify team
#         if: success()
#         run: |
#           echo "🚀 Production database deployment successful!"
#           # Slack 또는 Discord 알림을 여기에 추가할 수 있습니다

#   rollback:
#     name: Emergency Rollback
#     runs-on: ubuntu-latest
#     if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
#     needs: [deploy-staging, deploy-production]

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"

#       - name: Install Supabase CLI
#         run: npm install -g supabase

#       - name: Emergency rollback notification
#         run: |
#           echo "🚨 Emergency rollback triggered!"
#           echo "Please review the deployment logs and execute manual rollback if necessary."
#           echo "Rollback script is available at: supabase/rollback.sql"

#       # 자동 롤백은 위험할 수 있으므로 수동 개입을 권장
#       # 필요시 아래 단계들의 주석을 해제하여 자동 롤백 구현 가능

#       # - name: Link to project
#       #   run: |
#       #     supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
#       #   env:
#       #     SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

#       # - name: Execute rollback
#       #   run: |
#       #     # 주의: 이것은 모든 데이터를 삭제합니다!
#       #     # psql -f supabase/rollback.sql $DATABASE_URL
#       #     echo "Manual rollback required - check rollback.sql"
