{
  "tasks": [
    {
      "id": 1,
      "title": "Project Setup and Environment Configuration",
      "description": "Initialize Next.js 15 project with React 19, TypeScript, and essential development tools",
      "details": "Create Next.js 15 project using `npx create-next-app@latest --typescript --tailwind --app`. Install dependencies: @types/node@^20, typescript@^5.3, tailwindcss@^3.4, @tailwindcss/forms, @tailwindcss/typography. Setup Docker development environment with docker-compose.yml including Redis container. Configure .env.local with Supabase, OpenAI, Anthropic API keys. Setup ESLint, Prettier, and Husky for code quality.",
      "testStrategy": "Verify project builds successfully, Docker containers start properly, and all environment variables are loaded correctly",
      "priority": "high",
      "dependencies": [],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Supabase Database Schema Implementation",
      "description": "Create and configure all required database tables with Row Level Security policies",
      "details": "Create Supabase project and implement schema: user_profiles, conversations, messages, documents, document_chunks, prompt_templates, api_usage_logs, auth_tokens, verification_codes, auth_sessions, auth_attempt_logs. Enable RLS on all tables. Create indexes for performance: conversations(user_id, created_at), messages(conversation_id, created_at), auth_tokens(email, expires_at). Setup database functions for cleanup expired tokens.",
      "testStrategy": "Run migration scripts, verify RLS policies work correctly, test database constraints and foreign key relationships",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "Database Schema Design",
          "description": "Design comprehensive database schema for all required tables",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 2
        },
        {
          "id": 2,
          "title": "Migration Scripts Creation",
          "description": "Create migration scripts for all database tables and auth flow",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 2
        },
        {
          "id": 3,
          "title": "Apply Migrations to Supabase",
          "description": "Apply migration scripts to Supabase cloud database",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 2
        }
      ]
    },
    {
      "id": 3,
      "title": "Supabase Client Configuration and Types",
      "description": "Setup Supabase client with TypeScript types and authentication configuration",
      "details": "Install @supabase/supabase-js@^2.38. Generate TypeScript types using `supabase gen types typescript`. Create lib/supabase.ts with createClient configuration for both client and server components. Setup middleware.ts for auth state management. Configure Supabase Auth settings: disable email confirmation, enable magic links, set custom SMTP if needed.",
      "testStrategy": "Verify Supabase client connects successfully, types are generated correctly, and auth state persists across page refreshes",
      "priority": "high",
      "dependencies": [
        2
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "Install Supabase Packages",
          "description": "Install @supabase/supabase-js and related packages",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 3
        },
        {
          "id": 2,
          "title": "Generate TypeScript Types",
          "description": "Generate TypeScript types from Supabase database schema",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 3
        },
        {
          "id": 3,
          "title": "Create Supabase Client Configuration",
          "description": "Create lib/supabase.ts with client and server configurations",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 3
        },
        {
          "id": 4,
          "title": "Setup Environment Variables",
          "description": "Configure Supabase environment variables and connection settings",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 3
        }
      ]
    },
    {
      "id": 4,
      "title": "Magic Link Authentication System",
      "description": "Implement unified email-based authentication with magic link functionality",
      "details": "Create auth service using Supabase Auth API. Implement signInWithOtp for magic links. Create auth/callback route handler for magic link processing. Build EmailInputPage component with email validation using react-hook-form@^7.48 + zod@^3.22. Implement token generation and storage in auth_tokens table. Add email rate limiting (max 3 attempts per 15 minutes). Create custom email templates matching Claude.ai styling.",
      "testStrategy": "Test magic link generation, email delivery, token validation, rate limiting, and successful authentication flow",
      "priority": "high",
      "dependencies": [
        3
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "Setup Supabase Auth API Integration",
          "description": "Initialize and configure Supabase client with Auth API for magic link authentication",
          "dependencies": [],
          "details": "Create a dedicated auth service module that initializes Supabase client with proper configuration. Implement the signInWithOtp method specifically for magic links. Set up environment variables for Supabase URL and API keys. Create helper functions for managing authentication state and session handling.",
          "status": "done",
          "testStrategy": "Write unit tests for auth service initialization and mock Supabase API responses to verify correct integration."
        },
        {
          "id": 2,
          "title": "Implement Email Input Component with Validation",
          "description": "Create the EmailInputPage component with proper validation using react-hook-form and zod",
          "dependencies": [],
          "details": "Build a React component that renders an email input form. Implement form validation using react-hook-form@^7.48 with zod@^3.22 schema validation. Create email format validation rules. Add error handling and display validation messages. Connect the form submission to the auth service's signInWithOtp method. Implement loading states during authentication attempts.",
          "status": "done",
          "testStrategy": "Test form validation with valid and invalid email formats. Verify error messages display correctly and form submission triggers the auth service."
        },
        {
          "id": 3,
          "title": "Develop Auth Callback Route Handler",
          "description": "Create the route handler to process magic link tokens and authenticate users",
          "dependencies": [],
          "details": "Implement an auth/callback route handler that extracts the token from URL parameters. Verify token validity using Supabase Auth API. Handle successful authentication by establishing a session. Implement error handling for invalid or expired tokens. Set up proper redirects after authentication (success/failure paths).\n<info added on 2025-06-06T10:08:29.277Z>\n✅ **Auth Callback Route Handler 구현 완료**\n\n**구현한 주요 기능들:**\n\n1. **`/src/app/auth/callback/route.ts` 생성**\n   - Next.js App Router를 사용한 GET 라우트 핸들러 구현\n   - URL 파라미터에서 `token_hash`, `type`, `next` 추출\n   - AuthService.verifyOtp()를 통한 토큰 검증\n   - 성공/실패에 따른 적절한 리다이렉트 처리\n\n2. **에러 처리 및 리다이렉트**\n   - 인증 성공 시: 지정된 페이지(`next`) 또는 홈(`/`)으로 리다이렉트\n   - 인증 실패 시: `/login?error=authentication_failed&message=...`로 리다이렉트\n   - 토큰 없음/무효 시: `/login?error=invalid_token&message=...`로 리다이렉트\n   - 예상치 못한 에러 시: `/login?error=unexpected_error&message=...`로 리다이렉트\n\n3. **AuthService 확장**\n   - `verifyOtp(token_hash, type)` 메서드 추가\n   - `getUser()` 메서드 추가\n   - 모듈화된 접근으로 재사용성 향상\n\n4. **로그인 페이지 에러 처리**\n   - URL 파라미터를 통한 에러 메시지 표시\n   - `useSearchParams`와 `useEffect`를 사용한 클라이언트 사이드 에러 처리\n   - 시각적 에러 메시지 UI (빨간색 배경의 알림창)\n\n**테스트 케이스:**\n- ✅ 유효한 토큰으로 콜백 접근 시 인증 성공 및 리다이렉트\n- ✅ 무효한 토큰으로 접근 시 에러 메시지와 함께 로그인 페이지로 리다이렉트\n- ✅ 토큰 없이 접근 시 적절한 에러 처리\n- ✅ 로그인 페이지에서 에러 메시지 표시\n\n**다음 단계:** 실제 매직 링크 플로우 테스트 필요\n</info added on 2025-06-06T10:08:29.277Z>",
          "status": "done",
          "testStrategy": "Test the route handler with valid and invalid tokens. Verify correct session establishment and appropriate redirects."
        },
        {
          "id": 4,
          "title": "Implement Token Storage and Rate Limiting",
          "description": "Create token generation, storage in auth_tokens table, and implement rate limiting",
          "dependencies": [],
          "details": "Design and create the auth_tokens table schema in Supabase. Implement token generation with appropriate expiration times. Create functions to store and validate tokens. Implement rate limiting logic to restrict users to maximum 3 email attempts per 15 minutes. Add timestamp tracking for rate limiting enforcement. Create error messages for rate-limited users.",
          "status": "done",
          "testStrategy": "Test token generation, storage and retrieval. Verify rate limiting by simulating multiple authentication attempts within the time window."
        },
        {
          "id": 5,
          "title": "Create Custom Email Templates",
          "description": "Design and implement custom email templates for magic link authentication matching Claude.ai styling",
          "dependencies": [
            4
          ],
          "details": "Design HTML email templates matching Claude.ai brand styling. Implement dynamic content insertion for magic links and user information. Configure Supabase to use custom email templates. Test email rendering across different email clients. Ensure proper handling of template variables for personalization. Implement both plain text and HTML versions of emails for compatibility.\n<info added on 2025-06-06T15:46:21.090Z>\n✅ **이메일 템플릿 구현 완료**\n\n**구현한 주요 기능들:**\n\n1. **매직 링크 이메일 템플릿 (`magic-link-template.ts`)**\n   - Claude.ai 브랜딩에 맞는 깔끔하고 모던한 디자인\n   - 그라데이션 헤더 (보라색 → 파란색)\n   - Goguryeo + Gaemamusa AI 브랜딩 적용\n   - 반응형 디자인 (모바일/데스크톱 대응)\n   - HTML과 Plain Text 버전 모두 제공\n   - 보안 안내 섹션 포함 (만료시간, 일회용 링크 등)\n   - 대체 링크 표시 (버튼이 작동하지 않을 경우)\n\n2. **이메일 템플릿 서비스 (`email-template-service.ts`)**\n   - EmailTemplateService 클래스로 중앙화된 관리\n   - 브랜드 설정 커스터마이징 지원\n   - Supabase 이메일 템플릿 설정 자동 생성\n   - 이메일 렌더링 검증 기능\n   - 만료시간 자동 계산 (한국 시간대 기준)\n\n3. **테스트 유틸리티 (`test-utils.ts`)**\n   - 종합적인 템플릿 테스트 도구\n   - 다양한 데이터 케이스 테스트\n   - 이메일 클라이언트 호환성 체크\n   - 브라우저에서 미리보기 기능\n   - 개발자 친화적 전역 함수 제공\n\n4. **개발자 미리보기 페이지 (`/dev/email-template-preview`)**\n   - 실시간 템플릿 미리보기\n   - 동적 데이터 변경 및 테스트\n   - Supabase 설정 가이드 포함\n   - 종합 테스트 결과 표시\n\n5. **설정 가이드 문서 (`setup-guide.md`)**\n   - Supabase Dashboard 설정 방법\n   - 단계별 상세 가이드\n   - 환경별 설정 방법\n   - 배포 체크리스트 포함\n\n**주요 특징:**\n- 📱 반응형 디자인 (모바일 최적화)\n- 🎨 Claude.ai 스타일 브랜딩\n- 🔒 보안 안내 메시지 포함\n- 🌐 다국어 지원 고려 (한국어)\n- ✅ 이메일 클라이언트 호환성 확보\n- 🧪 종합적인 테스트 도구 제공\n\n**다음 단계:** Supabase Dashboard에서 템플릿 설정 필요\n</info added on 2025-06-06T15:46:21.090Z>",
          "status": "done",
          "testStrategy": "Test email template rendering with various data inputs. Verify emails display correctly across major email clients and that magic links function properly when clicked."
        }
      ]
    },
    {
      "id": 5,
      "title": "Cross-Browser Security System",
      "description": "Implement browser fingerprinting and verification code system for cross-browser access",
      "details": "Install @fingerprintjs/fingerprintjs@^4.2 for browser fingerprinting. Create browser detection service using navigator.userAgent, screen resolution, timezone. Implement 6-digit verification code generation and storage in verification_codes table. Create CrossBrowserVerificationPage and VerificationPage components. Add IP tracking using headers['x-forwarded-for']. Implement session tracking in auth_sessions table with browser_fingerprint field.",
      "testStrategy": "Test cross-browser detection, verification code generation/validation, session tracking, and security logging",
      "priority": "high",
      "dependencies": [
        4
      ],
      "status": "in-progress",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "JWT Session Management",
      "description": "Implement JWT token-based session management with automatic renewal",
      "details": "Use Supabase built-in JWT handling with custom session management. Create session service for token refresh using supabase.auth.getSession(). Implement automatic token renewal 5 minutes before expiration. Add session validation middleware for protected routes. Create auth context provider using React 19's use() hook for session state. Implement secure logout with token invalidation.",
      "testStrategy": "Test token generation, automatic renewal, session persistence, logout functionality, and expired token handling",
      "priority": "high",
      "dependencies": [
        5
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Security Monitoring and Logging",
      "description": "Implement authentication attempt logging and anomaly detection",
      "details": "Create logging service for auth_attempt_logs table capturing: IP, user_agent, attempt_type, success/failure, timestamp. Implement rate limiting using Redis with sliding window algorithm. Add suspicious activity detection: multiple failed attempts, unusual IP patterns, rapid successive logins. Create security dashboard component for admin users. Implement email alerts for security events using Supabase Edge Functions.",
      "testStrategy": "Test logging accuracy, rate limiting effectiveness, anomaly detection triggers, and alert system functionality",
      "priority": "medium",
      "dependencies": [
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "AI SDK Integration and Model Configuration",
      "description": "Setup AI SDK with multiple providers (OpenAI, Anthropic, Google AI)",
      "details": "Install ai@^3.0 (Vercel AI SDK). Configure providers: @ai-sdk/openai@^0.0.42, @ai-sdk/anthropic@^0.0.27, @ai-sdk/google@^0.0.31. Create AI service with model switching capability. Implement streaming responses using streamText(). Add model-specific configurations: temperature, max_tokens, top_p. Create AI provider abstraction layer for easy model switching. Setup fallback mechanisms for provider failures.",
      "testStrategy": "Test each AI provider connection, streaming responses, model switching, error handling, and fallback mechanisms",
      "priority": "high",
      "dependencies": [
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Real-time Chat Interface",
      "description": "Build Claude.ai-style chat interface with real-time streaming responses",
      "details": "Create chat components: ChatContainer, MessageList, MessageInput, StreamingMessage. Implement Server-Sent Events for real-time streaming using AI SDK's streamText. Add message state management with React 19's useOptimistic for instant UI updates. Create typing indicators and message status (sending, sent, error). Implement message formatting with markdown support using react-markdown@^9.0. Add copy message, regenerate response functionality.",
      "testStrategy": "Test real-time streaming, message persistence, UI responsiveness, markdown rendering, and error states",
      "priority": "high",
      "dependencies": [
        8
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Conversation Management System",
      "description": "Implement conversation sessions with save, load, and management capabilities",
      "details": "Create conversation service for CRUD operations on conversations and messages tables. Implement conversation sidebar with search and filtering. Add conversation metadata: title auto-generation, last_message_at, message_count. Create conversation sharing functionality with public URLs. Implement conversation export (JSON, markdown). Add conversation templates and quick actions. Use React 19's concurrent features for smooth list rendering.",
      "testStrategy": "Test conversation creation, saving, loading, search functionality, sharing, and export features",
      "priority": "high",
      "dependencies": [
        9
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 11,
      "title": "Redis Caching System",
      "description": "Implement Redis-based caching for prompts and responses",
      "details": "Install redis@^4.6 and @types/redis. Create Redis client with connection pooling. Implement prompt caching with hash-based keys using crypto.createHash('sha256'). Add response caching with TTL (1 hour for similar prompts). Create cache invalidation strategies. Implement cache warming for popular prompts. Add cache hit/miss metrics. Use Redis Streams for real-time features if needed.",
      "testStrategy": "Test cache hit/miss rates, TTL expiration, invalidation strategies, and performance improvements",
      "priority": "medium",
      "dependencies": [
        8
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "File Upload and Document Processing",
      "description": "Implement secure file upload with support for PDF, Word, and text files",
      "details": "Setup Supabase Storage bucket with RLS policies. Install file processing libraries: pdf-parse@^1.1.1, mammoth@^1.6.0 for Word docs. Create upload component with drag-and-drop using react-dropzone@^14.2. Implement file validation: type checking, size limits (10MB), virus scanning. Add progress indicators and error handling. Create document metadata extraction and storage in documents table.",
      "testStrategy": "Test file upload, type validation, size limits, progress tracking, and metadata extraction for each supported format",
      "priority": "medium",
      "dependencies": [
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 13,
      "title": "Document Parsing and Text Extraction",
      "description": "Implement automatic text extraction and document chunking for RAG",
      "details": "Create document processing service with text extraction for PDF (pdf-parse), Word (mammoth), and plain text. Implement intelligent chunking using LangChain's RecursiveCharacterTextSplitter with overlap. Add chunk size optimization (500-1000 tokens). Create document preprocessing: cleaning, normalization, metadata extraction. Store chunks in document_chunks table with vector embeddings. Implement async processing using Supabase Edge Functions.",
      "testStrategy": "Test text extraction accuracy, chunking quality, processing speed, and chunk storage for various document types",
      "priority": "medium",
      "dependencies": [
        12
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 14,
      "title": "Vector Database and Embeddings",
      "description": "Setup vector storage and similarity search for document embeddings",
      "details": "Enable pgvector extension in Supabase. Install @supabase/vecs for vector operations. Create embedding service using OpenAI text-embedding-3-small model. Implement vector storage in document_chunks table with embedding column. Add similarity search using cosine similarity. Create vector indexing for performance (HNSW index). Implement semantic search with relevance scoring and filtering.",
      "testStrategy": "Test embedding generation, vector storage, similarity search accuracy, query performance, and relevance scoring",
      "priority": "medium",
      "dependencies": [
        13
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 15,
      "title": "RAG System Implementation",
      "description": "Build Retrieval-Augmented Generation system for document-based Q&A",
      "details": "Create RAG service combining vector search with AI generation. Implement context retrieval: query embedding, similarity search, context ranking. Add context window management (max 4000 tokens). Create prompt templates for RAG with document citations. Implement relevance filtering and source attribution. Add multi-document querying and cross-referencing. Use LangChain for advanced RAG patterns.",
      "testStrategy": "Test retrieval accuracy, context relevance, citation quality, multi-document queries, and answer quality",
      "priority": "medium",
      "dependencies": [
        14
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 16,
      "title": "Claude.ai-Style UI Components",
      "description": "Create responsive UI components matching Claude.ai design with orange gradient branding",
      "details": "Create design system with Claude.ai-inspired components. Implement orange gradient logo and color scheme. Build responsive layout components: Header, Sidebar, MainContent. Create form components with Tailwind CSS: Input, Button, Select, TextArea. Add loading states, animations, and micro-interactions. Implement dark/light mode toggle with system preference detection. Use CSS custom properties for theme switching.",
      "testStrategy": "Test responsive design across devices, theme switching, component accessibility, and visual consistency",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 17,
      "title": "Accessibility Implementation",
      "description": "Ensure WCAG 2.1 AA compliance across all components and interactions",
      "details": "Install @axe-core/react for accessibility testing. Implement ARIA labels, roles, and properties. Add keyboard navigation support for all interactive elements. Ensure color contrast ratios meet WCAG standards. Implement screen reader support with semantic HTML. Add focus management and skip links. Create accessible form validation with clear error messages. Test with screen readers (NVDA, JAWS).",
      "testStrategy": "Run automated accessibility tests, manual screen reader testing, keyboard navigation testing, and color contrast validation",
      "priority": "medium",
      "dependencies": [
        16
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 18,
      "title": "User Dashboard and Settings",
      "description": "Create user profile management and application settings interface",
      "details": "Create user dashboard with profile management, usage statistics, and settings. Implement profile editing: name, avatar, preferences. Add usage tracking dashboard: API calls, document uploads, conversation count. Create settings panels: theme selection, notification preferences, AI model preferences. Implement data export functionality (GDPR compliance). Add account deletion with data cleanup.",
      "testStrategy": "Test profile updates, settings persistence, usage statistics accuracy, data export functionality, and account deletion",
      "priority": "medium",
      "dependencies": [
        10
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 19,
      "title": "Performance Optimization",
      "description": "Implement performance optimizations for loading times and responsiveness",
      "details": "Implement Next.js 15 optimizations: dynamic imports, image optimization, font optimization. Add React 19 concurrent features: Suspense boundaries, useTransition for non-urgent updates. Implement virtual scrolling for long conversation lists using @tanstack/react-virtual@^3.0. Add service worker for offline functionality. Optimize bundle size with tree shaking and code splitting. Implement prefetching for critical resources.",
      "testStrategy": "Measure Core Web Vitals, test loading performance, verify offline functionality, and validate bundle size optimizations",
      "priority": "medium",
      "dependencies": [
        17
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 20,
      "title": "Error Handling and Monitoring",
      "description": "Implement comprehensive error handling and monitoring with Sentry integration",
      "details": "Install @sentry/nextjs@^7.99 for error tracking. Create error boundary components with fallback UI. Implement global error handling for API routes and client-side errors. Add performance monitoring and user session replay. Create custom error pages (404, 500, offline). Implement retry mechanisms for failed API calls. Add user feedback collection for errors.",
      "testStrategy": "Test error boundary functionality, verify Sentry integration, validate error reporting, and test retry mechanisms",
      "priority": "medium",
      "dependencies": [
        19
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 21,
      "title": "Testing Suite Implementation",
      "description": "Create comprehensive test suite with unit, integration, and E2E tests",
      "details": "Setup testing framework: Jest@^29.7, @testing-library/react@^14.1, @testing-library/jest-dom@^6.1. Create unit tests for utilities, hooks, and components. Implement integration tests for API routes and database operations. Setup Playwright@^1.40 for E2E testing. Create test utilities and mocks for Supabase, AI providers. Add visual regression testing with Percy or Chromatic. Setup test coverage reporting.",
      "testStrategy": "Achieve 80%+ test coverage, validate all critical user flows, test cross-browser compatibility, and ensure CI/CD integration",
      "priority": "medium",
      "dependencies": [
        20
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 22,
      "title": "Production Deployment and CI/CD",
      "description": "Setup production deployment pipeline with Vercel and automated CI/CD",
      "details": "Configure Vercel deployment with environment variables and domain setup. Create GitHub Actions workflow for CI/CD: test running, build verification, automated deployment. Setup staging environment with Vercel preview deployments. Configure production monitoring: Vercel Analytics, Supabase monitoring. Implement database migration strategy. Setup backup and disaster recovery procedures. Create deployment documentation and runbooks.",
      "testStrategy": "Test deployment pipeline, verify environment configurations, validate monitoring setup, and test rollback procedures",
      "priority": "low",
      "dependencies": [
        21
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}